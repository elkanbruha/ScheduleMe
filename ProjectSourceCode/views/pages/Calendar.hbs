{{> head title="Calendar - ScheduleMe" }}
<div class="row">
  <div class="col-2">
    <div class="custom-container">
      <button class="btn btn-primary mt-3" data-bs-toggle="modal" data-bs-target="#event_modal">Create Event</button>
    </div>
  </div>
  <div class="col">
    <div class="container-md container-fluid py-4 h-100">
      <div id="calendar" class="row h-100">
        {{#each (array "Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday")}}
        <div class="col-sm m-1 bg-white rounded px-1 px-md-2" id="{{lower this}}">
          <div class="h6 text-center position-relative py-2 day">{{this}}</div>
          <div class="appointments-container"></div>
        </div>
        {{/each}}
      </div>
    </div>
  </div>
</div>

{{!-- Modal --}}
<div class="modal" id="event_modal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modal-title">Create Appointment</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="appointmentForm">
          <input type="hidden" id="appointment_id" value="">
          <div class="mb-3" id="business-select-container">
            <label for="business_id" class="form-label">Select Business</label>
            <select class="form-select" id="business_id" required>
              <option value="">Select a business</option>
              <!-- Businesses will be loaded dynamically -->
            </select>
          </div>
          <div class="mb-3">
            <label for="start_time" class="form-label">Start Time</label>
            <input type="datetime-local" class="form-control" id="start_time" required>
          </div>
          <div class="mb-3">
            <label for="end_time" class="form-label">End Time</label>
            <input type="datetime-local" class="form-control" id="end_time" required>
          </div>
          <div class="mb-3">
            <label for="reason" class="form-label">Reason for Meeting</label>
            <textarea class="form-control" id="reason" rows="3" required></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="delete-btn" style="display: none;" onclick="deleteAppointment()">Delete</button>
        <button type="button" class="btn btn-primary" id="save-btn" onclick="saveEvent()">Create Appointment</button>
      </div>
    </div>
  </div>
</div>

{{!-- Confirmation Modal --}}
<div class="modal" id="confirm_modal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this appointment?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirm-delete-btn">Delete</button>
      </div>
    </div>
  </div>
</div>

<script>
  // Initialize everything when the page loads
  document.addEventListener('DOMContentLoaded', function() {
    fetchBusinesses();
    fetchAppointments();
    
    // Initialize the bootstrap modal objects
    window.eventModal = new bootstrap.Modal(document.getElementById('event_modal'));
    window.confirmModal = new bootstrap.Modal(document.getElementById('confirm_modal'));
    
    // Set up the confirm delete button
    document.getElementById('confirm-delete-btn').addEventListener('click', function() {
      const appointmentId = document.getElementById('appointment_id').value;
      if (appointmentId) {
        confirmDeleteAppointment(appointmentId);
      }
    });
  });

  // Function to fetch businesses from the API
  function fetchBusinesses() {
    fetch('/businesses')
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        // Get the select element
        const businessSelect = document.getElementById('business_id');
        
        // Clear any existing options except the first one
        while (businessSelect.options.length > 1) {
          businessSelect.remove(1);
        }
        
        // Add businesses from the API to the select element
        if (data.businesses && data.businesses.length > 0) {
          data.businesses.forEach(business => {
            const option = document.createElement('option');
            option.value = business.business_id;
            option.textContent = business.business_name || business.name;
            businessSelect.appendChild(option);
          });
        } else {
          // Add a message if no businesses are available
          const option = document.createElement('option');
          option.value = "";
          option.textContent = "No businesses available";
          option.disabled = true;
          businessSelect.appendChild(option);
        }
      })
      .catch(error => {
        console.error('Error fetching businesses:', error);
        // Add a fallback option if the API call fails
        const businessSelect = document.getElementById('business_id');
        const option = document.createElement('option');
        option.value = "";
        option.textContent = "Error loading businesses";
        option.disabled = true;
        businessSelect.appendChild(option);
      });
  }

  // Function to fetch appointments for the current user or business
  function fetchAppointments() {
    fetch('/appointments')
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        // Clear all existing appointments from the calendar
        const appointmentContainers = document.querySelectorAll('.appointments-container');
        appointmentContainers.forEach(container => {
          container.innerHTML = '';
        });
        
        // Display appointments on the calendar
        if (data.appointments && data.appointments.length > 0) {
          data.appointments.forEach(appointment => {
            displayAppointment(appointment);
          });
        }
      })
      .catch(error => {
        console.error('Error fetching appointments:', error);
      });
  }

  // Function to display an appointment on the calendar
  function displayAppointment(appointment) {
    // Parse the start time
    const startTime = new Date(appointment.start_time);
    const endTime = new Date(appointment.end_time);
    
    // Get the day of the week (0 = Sunday, 1 = Monday, etc.)
    const dayOfWeek = startTime.getDay();
    const dayNames = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
    const dayName = dayNames[dayOfWeek];
    
    // Format the time (e.g. "10:00 AM - 11:00 AM")
    const formattedStartTime = startTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    const formattedEndTime = endTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    const timeRange = `${formattedStartTime} - ${formattedEndTime}`;
    
    // Create the appointment card
    const appointmentCard = document.createElement('div');
    appointmentCard.className = 'appointment-card';
    appointmentCard.setAttribute('data-appointment-id', appointment.appointment_id);
    
    // Determine who the appointment is with based on user type
    let appointmentWithText = '';
    if (appointment.user_name) {
      // Logged in as business, show user name
      appointmentWithText = `With: ${appointment.user_name}`;
    } else if (appointment.business_name || appointment.business_display_name) {
      // Logged in as user, show business name
      appointmentWithText = `With: ${appointment.business_display_name || appointment.business_name}`;
    }
    
    // Set the inner HTML of the appointment card
    appointmentCard.innerHTML = `
      <div class="appointment-time">${timeRange}</div>
      <div class="appointment-with">${appointmentWithText}</div>
      <div class="appointment-reason">${appointment.reason || 'No reason provided'}</div>
    `;
    
    // Add click event to open edit modal
    appointmentCard.addEventListener('click', () => {
      openEditModal(appointment);
    });
    
    // Add the appointment card to the appropriate day column
    const dayColumn = document.getElementById(dayName);
    if (dayColumn) {
      const appointmentsContainer = dayColumn.querySelector('.appointments-container');
      appointmentsContainer.appendChild(appointmentCard);
    }
  }

  // Function to open the edit modal with appointment details
  function openEditModal(appointment) {
    // Set the form values
    document.getElementById('appointment_id').value = appointment.appointment_id;
    
    if (document.getElementById('business_id')) {
      document.getElementById('business_id').value = appointment.business_id;
      
      // Disable business selection when editing
      document.getElementById('business_id').disabled = true;
    }
    
    // Format datetime-local value (YYYY-MM-DDThh:mm)
    const startTime = new Date(appointment.start_time);
    const endTime = new Date(appointment.end_time);
    
    const formatDateForInput = (date) => {
      return date.getFullYear() + '-' + 
        String(date.getMonth() + 1).padStart(2, '0') + '-' + 
        String(date.getDate()).padStart(2, '0') + 'T' + 
        String(date.getHours()).padStart(2, '0') + ':' + 
        String(date.getMinutes()).padStart(2, '0');
    };
    
    document.getElementById('start_time').value = formatDateForInput(startTime);
    document.getElementById('end_time').value = formatDateForInput(endTime);
    document.getElementById('reason').value = appointment.reason || '';
    
    // Update modal title and button text
    document.getElementById('modal-title').textContent = 'Edit Appointment';
    document.getElementById('save-btn').textContent = 'Update Appointment';
    
    // Show delete button
    document.getElementById('delete-btn').style.display = 'inline-block';
    
    // Open the modal
    window.eventModal.show();
  }

  // Function to save the event/appointment (create or update)
  function saveEvent() {
    const appointmentId = document.getElementById('appointment_id').value;
    const businessId = document.getElementById('business_id').value;
    const startTime = document.getElementById('start_time').value;
    const endTime = document.getElementById('end_time').value;
    const reason = document.getElementById('reason').value;
    
    // Validate form
    if ((!businessId && !appointmentId) || !startTime || !endTime) {
      alert('Please fill out all required fields');
      return;
    }
    
    // Create the appointment data
    const appointmentData = {
      business_id: businessId,
      start_time: startTime,
      end_time: endTime,
      reason: reason
    };
    
    let url = '/appointments';
    let method = 'POST';
    
    // If we have an appointment ID, we're updating
    if (appointmentId) {
      url = `/appointments/${appointmentId}`;
      method = 'PUT';
      // Remove business_id for updates as it can't be changed
      delete appointmentData.business_id;
    }
    
    // Send the data to the server
    fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(appointmentData)
    })
    .then(response => {
      if (!response.ok) {
        return response.json().then(data => {
          throw new Error(data.message || 'Failed to save appointment');
        });
      }
      return response.json();
    })
    .then(data => {
      // Close the modal
      window.eventModal.hide();
      
      // Reset the form and UI state
      resetForm();
      
      // Refresh appointments
      fetchAppointments();
      
      // Show success message
      const action = appointmentId ? 'updated' : 'created';
      alert(`Appointment ${action} successfully`);
    })
    .catch(error => {
      console.error('Error saving appointment:', error);
      alert(error.message || 'An error occurred while saving the appointment');
    });
  }

  // Function to delete an appointment (show confirmation first)
  function deleteAppointment() {
    window.eventModal.hide();
    window.confirmModal.show();
  }

  // Function to confirm and actually delete the appointment
  function confirmDeleteAppointment(appointmentId) {
    fetch(`/appointments/${appointmentId}`, {
      method: 'DELETE'
    })
    .then(response => {
      if (!response.ok) {
        return response.json().then(data => {
          throw new Error(data.message || 'Failed to delete appointment');
        });
      }
      return response.json();
    })
    .then(data => {
      // Close the confirmation modal
      window.confirmModal.hide();
      
      // Reset the form
      resetForm();
      
      // Refresh appointments
      fetchAppointments();
      
      // Show success message
      alert('Appointment deleted successfully');
    })
    .catch(error => {
      console.error('Error deleting appointment:', error);
      alert(error.message || 'An error occurred while deleting the appointment');
    });
  }

  // Function to reset the form and UI state
  function resetForm() {
    document.getElementById('appointmentForm').reset();
    document.getElementById('appointment_id').value = '';
    
    if (document.getElementById('business_id')) {
      document.getElementById('business_id').disabled = false;
    }
    
    document.getElementById('modal-title').textContent = 'Create Appointment';
    document.getElementById('save-btn').textContent = 'Create Appointment';
    document.getElementById('delete-btn').style.display = 'none';
  }
</script>